4
# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Boston Housing dataset (replace with your data path)
data = pd.read_csv("boston_housing.csv")

# Separate features (X) and target variable (y)
X = data.drop("MEDV", axis=1)  # Exclude MEDV (price) as the target variable
y = data["MEDV"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_predicted = model.predict(X_test)

# Evaluate model performance (optional)
from sklearn.metrics import mean_squared_error

# Calculate mean squared error (MSE)
mse = mean_squared_error(y_test, y_predicted)
print(f"Mean Squared Error: {mse:.2f}")

# --- Extra features from Code 1 ---

# Visualize the distribution of training prices (before training)
plt.figure(figsize=(10, 6))
sns.histplot(y_train, kde=True, bins=30)
plt.title('Distribution of Train Prices')
plt.xlabel('Training Prices')
plt.ylabel('Frequency')
plt.show()

# Visualize the distribution of predicted prices (after training)
plt.figure(figsize=(10, 6))
sns.histplot(y_predicted, kde=True, bins=30)
plt.title('Distribution of Predicted Prices')
plt.xlabel('Predicted Prices')
plt.ylabel('Frequency')
plt.show()

# Use the model to predict price for a new house (example)
new_house = [[CRIM=5.0, ZN=0.0, INDUS=18.0, ...]]  # Replace with your data
predicted_price = model.predict(new_house)[0]
print(f"Predicted price for the new house: ${predicted_price:.2f}")

# --- End of extra features ---

5

# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load data
data = pd.read_csv("Social_Network_Ads.csv")

# Separate features (X) and target variable (y)
X = data.drop("Purchased", axis=1)  # Exclude "Purchased" as the target variable
y = data["Purchased"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the Logistic Regression model
model = LogisticRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_predicted = model.predict(X_test)

# Create the confusion matrix
confusion_matrix_result = confusion_matrix(y_test, y_predicted)

# Calculate performance metrics
accuracy = accuracy_score(y_test, y_predicted)
error_rate = 1 - accuracy
precision = precision_score(y_test, y_predicted)
recall = recall_score(y_test, y_predicted)

# Print results
print("Confusion Matrix:\n", confusion_matrix_result)
print(f"Accuracy: {accuracy:.4f}")
print(f"Error Rate: {error_rate:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")

6

# Import libraries
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Target labels

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the Naive Bayes classifier
model = GaussianNB()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_predicted = model.predict(X_test)

# Create the confusion matrix
confusion_matrix_result = confusion_matrix(y_test, y_predicted)

# Calculate performance metrics
accuracy = accuracy_score(y_test, y_predicted)
error_rate = 1 - accuracy
precision = precision_score(y_test, y_predicted, average='weighted')  # Weighted precision
recall = recall_score(y_test, y_predicted, average='weighted')  # Weighted recall

# Print results
print("Confusion Matrix:\n", confusion_matrix_result)
print(f"Accuracy: {accuracy:.4f}")
print(f"Error Rate: {error_rate:.4f}")
print(f"Precision (Weighted): {precision:.4f}")
print(f"Recall (Weighted): {recall:.4f}")

